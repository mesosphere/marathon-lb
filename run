#!/bin/bash
set -euo pipefail

SYSLOG_SOCKET=${SYSLOG_SOCKET:-/dev/null}

HAPROXY_SERVICE="/marathon-lb/service/haproxy"
mkdir -p $HAPROXY_SERVICE/env

if [ -n "${PORTS-}" ]; then
  echo $PORTS > $HAPROXY_SERVICE/env/PORTS
else
  echo "Define $PORTS with a comma-separated list of ports to which HAProxy binds" >&2
  exit 1
fi

# Iterate through the arguments to see if any SSL certificate is provided.
prev=0
for key in "$@"
do

case $prev in
    --ssl-certs)
      SSL_CERTS=$key
    ;;
    *)
            # unknown option
    ;;
esac
prev=$key
done

openssl genrsa -out /tmp/server-key.pem 2048
openssl req -new -key /tmp/server-key.pem -out /tmp/server-csr.pem -subj /CN=*/
openssl x509 -req -in /tmp/server-csr.pem -out /tmp/server-cert.pem -signkey /tmp/server-key.pem -days 3650
cat /tmp/server-cert.pem /tmp/server-key.pem > /etc/ssl/private/selfsigned.pem
rm /tmp/server-*.pem
SSL_CERTS="/etc/ssl/private"

ssl_dir=/etc/ssl/private
ssl_staging_dir=/etc/ssl/staging
mkdir -p $ssl_dir
mkdir -p $ssl_staging_dir
chmod 700 $ssl_dir
chmod 700 $ssl_staging_dir

# Download certs from nutcracker.
# Required environment variables:
# NC_ID - Nutcracker ID
# NC_KEY - Nutcracker key
# NC_SERVER - Nutcracker server
get_ssl() {
  bin=/usr/local/bin/nutcracker-cli
  certlist=( $($bin -i "$NC_ID" -k "$NC_KEY" -s "$NC_SERVER" list ) )

  for cert in "${certlist[@]}"; do
      file="$cert.pem"
      # Give up on first failure, but do not error out.
      $bin -i "$NC_ID" -k "$NC_KEY" -s "$NC_SERVER" get -n "$cert" > "$ssl_staging_dir/$file" || break
      # Only replace the cert if we downloaded it successfully.  Success is defined as a file with
      # actual content in it.
      if (( $(stat -c %s $ssl_staging_dir/$file) > 0 )); then
        mv "$ssl_staging_dir/$file" "$ssl_dir/$file"
      fi
  done
}

update_ssl() {
  while sleep 86400; do
    get_ssl
  done
}

if [ -n "${MESOS_SANDBOX-}" ] && [ -d "$MESOS_SANDBOX/templates" ]; then
  mkdir -p templates
  cp -v "$MESOS_SANDBOX/templates/"* templates/
fi

if [[ $NM_ENV == prod ]]; then
  cp prod/* templates/
else
  cp dev/* templates/
fi


if [ -n "${HAPROXY_SYSCTL_PARAMS-}" ]; then
  echo "setting sysctl params to: ${HAPROXY_SYSCTL_PARAMS}"
  if [ -n "${HAPROXY_SYSCTL_NONSTRICT-}" ]; then
    # ignore errors
    sysctl -w $HAPROXY_SYSCTL_PARAMS || true
  else
    sysctl -w $HAPROXY_SYSCTL_PARAMS
  fi
fi

/usr/bin/runsv "$HAPROXY_SERVICE" &
RUNSV=$!
ARGS=""

trap "kill $RUNSV; wait $RUNSV; exit 0" TERM INT

MODE=$1; shift
case "$MODE" in
  poll)
    POLL_INTERVAL="${POLL_INTERVAL:-60}"
    ;;
  sse)
    ARGS="--sse"
    ;;
  event)
    URL=$1; shift
    if [ -z "$URL" ] || echo "$URL" | grep -q '^-'; then
      echo "$0 event callback-url [marathon_lb.py args]" >&2
      exit 1
    fi
    echo "Using $URL as event callback-url"
    ARGS="-u $URL"
    ;;
  *)
    echo "Unknown mode $MODE. Synopsis: $0 poll|sse|event [marathon_lb.py args]" >&2
    exit 1
    ;;
esac

while true; do
  get_ssl
  update_ssl &
  /marathon-lb/marathon_lb.py \
    --syslog-socket $SYSLOG_SOCKET \
    --haproxy-config /marathon-lb/haproxy.cfg \
    --ssl-certs $SSL_CERTS \
    --command "sv reload $HAPROXY_SERVICE" \
    $ARGS "$@" &
  wait $! || exit $? # Needed for the traps to work
  if [ "$MODE" != "poll" ]; then
    exit 0
  fi
  sleep "$POLL_INTERVAL" &
  wait $!
done
