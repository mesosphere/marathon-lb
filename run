#!/bin/bash
set -euo pipefail

SERVICE="/marathon-lb/service/haproxy"
if [ -n "${HAPROXY_SSL_CERT-}" ]; then
  echo "$HAPROXY_SSL_CERT" > /etc/ssl/mesosphere.com.pem
else
  openssl genrsa -out /tmp/server-key.pem 2048
  openssl req -new -key /tmp/server-key.pem -out /tmp/server-csr.pem -subj /CN=*/
  openssl x509 -req -in /tmp/server-csr.pem -out /tmp/server-cert.pem -signkey /tmp/server-key.pem -days 3650
  cat /tmp/server-cert.pem /tmp/server-key.pem > /etc/ssl/mesosphere.com.pem
  rm /tmp/server-*.pem
fi

if [ -n "${MESOS_SANDBOX-}" ] && [ -d "$MESOS_SANDBOX/templates" ]; then
  mkdir -p templates
  cp -v "$MESOS_SANDBOX/templates/"* templates/
fi

/usr/bin/runsv "$SERVICE" &
RUNSV=$!

trap "kill $RUNSV; wait $RUNSV; exit 0" TERM INT

MODE=$1; shift
case "$MODE" in
  poll)
    [ -z "$POLL_INTERVAL" ] && POLL_INTERVAL=60
    ;;
  sse)
    ARGS="--sse"
    ;;
  event)
    URL=$1; shift
    if [ -z "$URL" ] || echo "$URL" | grep -q '^-'; then
      echo "$0 event callback-url [marathon-update-haproxy.py args]" >&2
      exit 1
    fi
    echo "Using $URL as event callback-url"
    ARGS="-l :8080 -u '$URL'"
    ;;
  *)
    echo "Unknown mode $MODE. Synopsis: $0 poll|sse|event [marathon-update-haproxy.py args]" >&2
    exit 1
    ;;
esac

while true; do
  python /marathon-lb/marathon-update-haproxy.py \
    --syslog-socket /dev/null \
    --haproxy-config /marathon-lb/haproxy.cfg \
    --disable-service-port \
    -c "sv reload $SERVICE" \
    $ARGS $@ &
  wait $! || exit $? # Needed for the traps to work
  if [ "$MODE" != "poll" ]; then
    exit 0
  fi
  sleep "$POLL_INTERVAL" &
  wait $!
done
